{
    "collab_server" : "",
    "contents" : "---\ntitle: 'EWS: Supplementary Analysis of Filtered Variants, MuTect versus MuTect2'\nauthor: \"Richard J. de Borja & Nathaniel Anderson\"\ndate: \"May 15, 2017\"\noutput: pdf_document\n---\n\n```{r setup, include=FALSE}\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(devtools)\nload_all(pkg='~/local/src/R/ShlienLab.Core.SSM')\nlibrary(ShlienLab.Core.Filter)\nlibrary(plotting.general)\nlibrary(VennDiagram)\nlibrary(knitr)\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n# Introduction\nFiltering mutations is an essential step in identifying high confidence somatic mutations in genomic data.  These filters include:\n* minimum tumour/normal read support thresholds\n* mutation not found in common SNP databases (e.g. dbSNP, 1000k, Complete Genomics, etc.)\n* mutation not found in a custom panel of normals\n* mutation not found in complex genomic regions\n* mutation not found in hard/soft clipped regions\n\n# Methods\n## MuTect and MuTect2 SNV data\n```{r}\nmutect_files <- read.table(\n  file = '~/local/projects/ewings/docs/mutect_files.txt',\n  header = TRUE,\n  as.is = TRUE,\n  sep = '\\t',\n  quote = \"\\\"\"\n  )\nmutect_files$sample <- basename(mutect_files$mutect)\nmutect_files$sample <- gsub(\n  x=mutect_files$sample,\n  pattern='_cfilter_pon.rda',\n  replacement = ''\n  )\nmutect2_files <- read.table(\n  file = '~/local/projects/ewings/docs/mutect2_files.txt',\n  header = TRUE,\n  as.is = TRUE,\n  sep = '\\t',\n  quote = \"\\\"\"\n  )\nmutect2_files$sample <- basename(mutect2_files$mutect2)\nmutect2_files$sample <- gsub(\n  x = mutect2_files$sample,\n  pattern = '_annotated_filtered_clipped.rda',\n  replacement = ''\n  )\nmutect_mutect2_files <- dplyr::full_join(\n  x = mutect_files,\n  y = mutect2_files,\n  by = c('sample')\n  )\n\n# running locally we need to localize the mount point\nmutect_mutect2_files$mutect <- gsub(\n  x = mutect_mutect2_files$mutect,\n  pattern = '/hpf/largeprojects/adam',\n  replacement = '/Volumes/adam_rodesktop_largep'\n  )\nmutect_mutect2_files$mutect2 <- gsub(\n  x = mutect_mutect2_files$mutect2,\n  pattern = '/hpf/largeprojects/adam/projects/icgc_tcga_datasets',\n  replacement = '/Volumes/adam_rodesktop_icgc'\n  )\nmutect_mutect2_files <- mutect_mutect2_files[!is.na(mutect_mutect2_files$mutect),]\nmutect_mutect2_files <- mutect_mutect2_files[!is.na(mutect_mutect2_files$mutect2),]\n\n# create the Venn diagram for each MuTect/MuTect2 pairing\nfor (i in 1:(nrow(mutect_mutect2_files) - 1)) {\n  mutect <- load(mutect_mutect2_files$mutect[i])\n  mutect <- get(mutect)\n  mutect <- ShlienLab.Core.SSM::create_final_filtered_dataframe(data=mutect)\n\n  mutect2 <- load(mutect_mutect2_files$mutect2[i])\n  mutect2 <- get(mutect2)\n  mutect2 <- ShlienLab.Core.SSM::create_final_filtered_dataframe(data=mutect2)\n\n  title <- paste(sep=' ', \"Sample\", mutect_mutect2_files$sample[i])\n  output <- paste(\n    sep='_',\n    mutect_mutect2_files$sample[i],\n    \"sample.png\"\n    )\n  venn.diagram(\n    x = list(MuTect = mutect$snvid, MuTect2 = mutect2$snvid),\n    filename = output,\n    main = title\n    )\n  }\n```\n\n\n## Known Good Mutations\nMutations from MuTect v1.1.4 were manually inspected to classify them as either \"Good\" or \"Bad\" based on previous experience.  We use these classifications to determine whether the mutations are found in the MuTect2 data.\n```{r}\nclassified_snvs <- read.table(\n  file = '~/Downloads/random_snvs_ewings - random_snvs_ewings.tsv',\n  header = TRUE,\n  as.is = TRUE,\n  sep = '\\t'\n  )\n# there are leading and lagging white space in the \"Judgement\" column, removing these\nclassified_snvs$Judgement = gsub(\n  x = classified_snvs$Judgement,\n  pattern='^\\\\s+',\n  replacement='',\n  perl = TRUE\n  )\nclassified_snvs$Judgement = gsub(\n  x = classified_snvs$Judgement,\n  pattern='\\\\s+$',\n  replacement='',\n  perl = TRUE\n  )\n```\n\n```{r}\news_samples <- c(\n  '2213',\n  '2226',\n  '2234',\n#  '274194',\n  '2925',\n  '3071',\n  '4004',\n  '4021',\n  '4022',\n  '4094',\n  '4117',\n  '4120',\n  '4197',\n  '4226',\n  '4311',\n  '4434',\n  '4458',\n  '4459',\n  '4460',\n  '4461',\n  '4462',\n#  '4463',\n  '4464',\n  '4465'\n#  '4466'\n  )\news_classified_snvs <- classified_snvs %>% filter(Sample %in% ews_samples)\news_classified_snvs <- ShlienLab.Core.Filter::add.snvid(data=ews_classified_snvs)\n\nin_mutect_table <- data.frame()\n\n# tumor_name is incorrect, Nathan created a Sample column name\nfor(i in 1:length(ews_samples)) {\n  # subset the SNVs to only those in a given sample\n  known_snvs <- ews_classified_snvs %>% filter(Sample == ews_samples[i])\n\n  mutect_snvs <- load(mutect_mutect2_files$mutect[mutect_mutect2_files$sample == ews_samples[i]])\n  mutect_snvs <- get(mutect_snvs)\n  mutect_snvs <- create_final_filtered_dataframe(data=mutect_snvs)\n  mutect_snvs_table <- mutect_snvs %>%\n    dplyr::select(\n      snvid\n      )\n  mutect_snvs_table$in_mutect <- TRUE\n  mutect_snvs_table <- left_join(\n    x = known_snvs %>% dplyr::select(Sample, snvid, Judgement, Comment),\n    y = mutect_snvs_table,\n    by = c('snvid')\n    )\n  mutect_snvs_table$in_mutect[is.na(mutect_snvs_table$in_mutect)] <- FALSE\n  \n  mutect2_snvs <- load(mutect_mutect2_files$mutect2[mutect_mutect2_files$sample == ews_samples[i]])\n  mutect2_snvs <- get(mutect2_snvs)\n  mutect2_snvs <- create_final_filtered_dataframe(data=mutect2_snvs)\n  mutect2_snvs_table <- mutect2_snvs %>%\n    dplyr::select(\n      snvid\n      )\n  mutect2_snvs_table$in_mutect2 <- TRUE\n  mutect_snvs_table <- left_join(\n    x = mutect_snvs_table,\n    y = mutect2_snvs_table,\n    by = c('snvid')\n    )\n  mutect_snvs_table$in_mutect2[is.na(mutect_snvs_table$in_mutect2)] <- FALSE\n  \n  in_mutect_table <- rbind(in_mutect_table, mutect_snvs_table)\n  }\n\nin_mutect_table$in_mutect[in_mutect_table$in_mutect == TRUE] <- 'Good'\nin_mutect_table$in_mutect[in_mutect_table$in_mutect == FALSE] <- 'Bad'\nin_mutect_table$in_mutect2[in_mutect_table$in_mutect2 == TRUE] <- 'Good'\nin_mutect_table$in_mutect2[in_mutect_table$in_mutect2 == FALSE] <- 'Bad'\n```\n\nWith the labelling of 'Good' and 'Bad' mutations based on the filtering criteria, we can compare those original MuTect mutations that were manually curated by those called by MuTect and MuTect2 without any additional manual curation.  We can then count the total number of true positives, false postivies, true negatives, and false negatives and calculate the specificity and sensitivity of each caller.\n\n```{r specificity_sensitivity_calculations}\nmutect_tp <- 0\nmutect_fp <- 0\nmutect_tn <- 0\nmutect_fn <- 0\n\nfor(i in 1:nrow(in_mutect_table)) {\n  if (in_mutect_table$Judgement[i] == 'Good' & in_mutect_table$in_mutect[i] == 'Good') {\n    mutect_tp = mutect_tp + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Bad' & in_mutect_table$in_mutect[i] == 'Good') {\n    mutect_fp = mutect_fp + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Good' & in_mutect_table$in_mutect[i] == 'Bad') {\n    mutect_fn = mutect_fn + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Bad' & in_mutect_table$in_mutect[i] == 'Bad') {\n    mutect_tn = mutect_tn + 1\n    }\n  }\n\nmutect_sensitivity <- mutect_tp / (mutect_tp + mutect_fn)\nmutect_specificity <- mutect_tn / (mutect_tn + mutect_fp)\n\nmutect2_tp <- 0\nmutect2_fp <- 0\nmutect2_tn <- 0\nmutect2_fn <- 0\n\nfor(i in 1:nrow(in_mutect_table)) {\n  if (in_mutect_table$Judgement[i] == 'Good' & in_mutect_table$in_mutect2[i] == 'Good') {\n    mutect2_tp = mutect2_tp + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Bad' & in_mutect_table$in_mutect2[i] == 'Good') {\n    mutect2_fp = mutect2_fp + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Good' & in_mutect_table$in_mutect2[i] == 'Bad') {\n    mutect2_fn = mutect2_fn + 1\n    }\n  else if (in_mutect_table$Judgement[i] == 'Bad' & in_mutect_table$in_mutect2[i] == 'Bad') {\n    mutect2_tn = mutect2_tn + 1\n    }\n  }\n\nmutect2_sensitivity <- mutect2_tp / (mutect2_tp + mutect2_fn)\nmutect2_specificity <- mutect2_tn / (mutect2_tn + mutect2_fp)\n\n\nmutect_vs_mutect2_stats <- data.frame(matrix(nrow=2, ncol=2))\ncolnames(mutect_vs_mutect2_stats) <- c('MuTect', 'MuTect2')\nrownames(mutect_vs_mutect2_stats) <- c('Specificity', 'Sensitivity')\nmutect_vs_mutect2_stats['Specificity', 'MuTect'] <- mutect_specificity\nmutect_vs_mutect2_stats['Sensitivity', 'MuTect'] <- mutect_sensitivity\nmutect_vs_mutect2_stats['Specificity', 'MuTect2'] <- mutect2_specificity\nmutect_vs_mutect2_stats['Sensitivity', 'MuTect2'] <- mutect2_sensitivity\nkable(mutect_vs_mutect2_stats)\n```\n\n\n# Discussion\nThe following table provides counts for mutations classified as true positive, false positive, true negative, and false negative.  These form the basis of the statistics used to evaluate the performance of each mutation caller.  Note that the classification of \"Good\" and \"Bad\" mutations were based on manual observations using screen captures from IGV.  Although this may form bias in the data, we use these as the gold standard.\n\n```{r}\nmutect_mutect2_counts <- data.frame(matrix(nrow=2, ncol=5))\ncolnames(mutect_mutect2_counts) <- c('Algorithm', 'TP', 'FP', 'TN', 'FN')\nmutect_mutect2_counts$Algorithm <- c('MuTect', 'MuTect2')\nmutect_mutect2_counts$TP <- c(mutect_tp, mutect2_tp)\nmutect_mutect2_counts$FP <- c(mutect_fp, mutect2_fp)\nmutect_mutect2_counts$TN <- c(mutect_tn, mutect2_tn)\nmutect_mutect2_counts$FN <- c(mutect_fn, mutect2_fn)\nkable(mutect_mutect2_counts)\n```\n\nRecall the calculation for sensitivity which is defined by true positive and false negative counts (i.e. sensitivity(TP, FN) and specificity is defined by the true negative and false positive counts (i.e. specificity(TN, FP)).  From the table shown, we can see that MuTect has a low specificity (0.577) because of the high false positive counts in contrast with MuTect2 which has a high specificity (0.923).  Observing the sensitivity rates, we note a drastic difference showing high sensitivity with MuTect (0.931) and a low sensitivity with MuTect2 (0.655).\n\nHere we provide the \"Comments\" used when labelling the mutations as either \"Good\" or \"Bad\" during manual inspection.\n\n```{r}\nkable(\n  in_mutect_table %>%\n    dplyr::select(Sample, Judgement, Comment, in_mutect, in_mutect2) %>%\n    filter(Judgement == 'Good' & (in_mutect == 'Bad' | in_mutect2 == 'Bad'))\n  )\n```\n```{r}\nkable(\n  in_mutect_table %>%\n    dplyr::select(Sample, Judgement, Comment, in_mutect, in_mutect2) %>%\n    filter(Judgement == 'Bad' & (in_mutect == 'Good' | in_mutect2 == 'Good'))\n  )\n```\n\n\n# Conclusion\nTo be completed.\n\n# R Session Information\n```{r session_info}\nsessionInfo()\n```\n\n# References\nTo be completed.\n",
    "created" : 1493923501924.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3721854271",
    "id" : "A9ECAF3",
    "lastKnownWriteTime" : 1494857966,
    "last_content_update" : 1494857966728,
    "path" : "~/local/projects/ewings/docs/mutect_vs_mutect.Rmd",
    "project_path" : null,
    "properties" : {
        "last_setup_crc32" : "CDBAA4B88a31302",
        "tempName" : "Untitled3"
    },
    "relative_order" : 12,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}